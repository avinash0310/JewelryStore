// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
Array [
  <Context.Provider
    value={
      Object {
        "store": Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Subscription {
          "handleChangeWrapper": [Function],
          "listeners": Object {
            "notify": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": null,
        },
      }
    }
  >
    <Memo(Connect(Login)) />
  </Context.Provider>,
]
`;

exports[`Home should render initial layout 1`] = `
Array [
  <Context.Provider
    value={
      Object {
        "store": Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Subscription {
          "handleChangeWrapper": [Function],
          "listeners": Object {
            "notify": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": null,
        },
      }
    }
  >
    <Home />
  </Context.Provider>,
]
`;

exports[`Home should render initial layout 2`] = `
Array [
  <Context.Provider
    value={
      Object {
        "store": Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Subscription {
          "handleChangeWrapper": [Function],
          "listeners": Object {
            "notify": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": null,
        },
      }
    }
  >
    <Home />
  </Context.Provider>,
]
`;

exports[`MyComponent should render initial layout 1`] = `
Array [
  <Context.Provider
    value={
      Object {
        "store": Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Subscription {
          "handleChangeWrapper": [Function],
          "listeners": Object {
            "notify": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": null,
        },
      }
    }
  >
    <Memo(Connect(Login)) />
  </Context.Provider>,
]
`;

exports[`MyComponent should render with given state from Redux store 1`] = `
<div>
  <h1>
    Welcome to Jewelry Store
  </h1>
  <label>
    
  </label>
</div>
`;
